name: "Build Release ios/android"

on:
  pull_request: 
  push:

env:
  REPO: 'mobile-pipeline-poc'
  SONAR_HOST: 'https://sonarqube.services.liatr.io'

jobs:
  Version:
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v2
      - name: Get Version
        id: version
        run: echo ::set-output name=VERSION::$(jq -r .version package.json)
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
  Initial-check:
    runs-on: ubuntu-latest
    needs:
      - Version
    steps:
      - name: checkout code
        uses: actions/checkout@v2
        with: 
          fetch-depth: 0
      - name: Get Tag
        id: tag
        run: echo ::set-output name=SOURCE_TAG::$(git describe --tags --abbrev=0)
      - name: Check Version
        run: |
          if [ "v${{ needs.Version.outputs.VERSION }}" == "${{ steps.tag.outputs.SOURCE_TAG }}" ]; then
            echo "Version: ${{ needs.Version.outputs.VERSION }} needs to be updated in package.json" 
            exit 1
          fi 
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '14'
          cache: yarn
      - name: Install node modules
        run: yarn install
      - name: Generate Sonarqube reports
        run: yarn test
      - name: SonarQube Scan
        uses: docker://sonarsource/sonar-scanner-cli:4.6
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_SHAREDSVC_TOKEN }}
          SONAR_HOST_URL: ${{ env.SONAR_HOST }}
      - name: SonarQube Quality Gate check
        uses: sonarsource/sonarqube-quality-gate-action@master
        # Force to fail step after specific time
        timeout-minutes: 5
        env:
         SONAR_TOKEN: ${{ secrets.SONAR_SHAREDSVC_TOKEN }}

  # Build-ios:
  #   runs-on: macos-latest
  #   needs:
  #     - Version
  #   steps:
  #     - name: Checkout 
  #       uses: actions/checkout@v2
  #     - name: Setup Node
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: '14'
  #         cache: yarn
  #     - name: Install Node Modules
  #       run: yarn install
  #     - name: Install Cocoapods
  #       run: gem install cocoapods
  #     - name: Install Pod dependencies
  #       run: pod install
  #       working-directory: ios
  #     - name: Build IOS
  #       run: xcodebuild -workspace ios/ReactNativeSemaphoreNew.xcworkspace -scheme ReactNativeSemaphoreNew clean archive -sdk iphoneos -configuration release -UseModernBuildSystem=NO -archivePath $PWD/ReactNativeSemaphoreNew CODE_SIGNING_ALLOWED=NO
  #     - name: Upload artifact
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: 'ios-artifact'
  #         path: 'ReactNativeSemaphoreNew.xcarchive/Products/Applications/ReactNativeSemaphoreNew.app'

  # Build-android:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - Version
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - name: Setup Node
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: '14'
  #         cache: yarn
  #     - name: Install node modules
  #       run: yarn install   
  #     - name: Build Properties Setup
  #       run: |
  #         echo ${{ secrets.KEYSTORE }} | base64 -d > android/app/liatrio.keystore
  #         echo -e "password=${{ secrets.KEYSTORE_PASSWORD }}\nversion=${{ needs.Version.outputs.VERSION }}" > android/build.properties       
  #     - name: Build Android App Bundle
  #       run: cd android && ./gradlew bundleRelease --no-daemon
  #     - name: Upload artifacts
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: 'android-artifact'
  #         path: '/home/runner/work/mobile-pipeline-poc/mobile-pipeline-poc/android/app/build/outputs/bundle/release/app-release.aab'

  create-release-and-publish-ios-android-binaries: 
    runs-on: ubuntu-latest
    #if: github.ref == 'refs/heads/main'
    # needs: 
    # - Build-ios
    # - Build-android
    steps:
      - name: Checkout 
        uses: actions/checkout@v2
      - name: echo version
        run: echo "${{ needs.Version.outputs.version }}"
      # - name: Create release
      #   uses: liatrio/github-actions/github-create-release@master
      #   with:
      #     owner: 'liatrio'
      #     repo: 'mobile-pipeline-poc'
      #     tag_name: ${{ needs.Version.outputs.VERSION }}
      #     token_name: 'token'
      #     name: "Release: ${{ needs.Version.outputs.VERSION }}"
      #     pat: ${{ secrets.GITHUB_TOKEN }}  
      # - name: Download IOS/Android artifact
      #   uses: actions/download-artifact@v2
      #   with: 
      #     path: /home/runner/work/mobile-pipeline-poc/mobile-pipeline-poc
      # - name: Deploy android binary to release assets
      #   uses: liatrio/github-actions/github-upload-asset@master
      #   with: 
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     FILE: android-artifact/app-release.aab
      #     REPO: ${{ env.REPO }} 
      # - name: Deploy IOS binary to release assets
      #   uses: liatrio/github-actions/github-upload-asset@master
      #   with: 
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     FILE: ios-artifact/ReactNativeSemaphoreNew
      #     REPO: ${{ env.REPO }}
      # - name: Fastlane
      #   run: |
      #     echo ${{ secrets.GOOGLE_API_KEY }} | base64 -d > fastlane/google_api_key.json
      #     fastlane android release aab_path:android-artifact/app-release.aab
