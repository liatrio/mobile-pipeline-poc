name: "Build Release ios/android"

on:
  pull_request: 
  # push:

env:
  REPO: 'mobile-pipeline-poc'
  SONAR_HOST: 'https://sonarqube.services.liatr.io'

jobs:
  Version:
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v2
      - name: Get Version
        id: version
        run: echo ::set-output name=VERSION::$(jq -r .version package.json)
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
  
  # Initial-check:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - Version
  #   steps:
  #     - name: checkout code
  #       uses: actions/checkout@v2
  #       with: 
  #         fetch-depth: 0
  #     - name: Get Tag
  #       id: tag
  #       run: echo ::set-output name=SOURCE_TAG::$(git describe --tags --abbrev=0)
  #     - name: Check Version
  #       run: |
  #         if [ "v${{ needs.Version.outputs.VERSION }}" == "${{ steps.tag.outputs.SOURCE_TAG }}" ]; then
  #           echo "Version: ${{ needs.Version.outputs.VERSION }} needs to be updated in package.json" 
  #           exit 1
  #         fi 
  #     - name: Setup Node
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: '14'
  #         cache: yarn
  #     - name: Install node modules
  #       run: yarn install
  #     - name: Generate Sonarqube reports
  #       run: yarn test
  #     - name: SonarQube Scan
  #       uses: docker://sonarsource/sonar-scanner-cli:4.6
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_SHAREDSVC_TOKEN }}
  #         SONAR_HOST_URL: ${{ env.SONAR_HOST }}
  #     - name: SonarQube Quality Gate check
  #       uses: sonarsource/sonarqube-quality-gate-action@master
  #       # Force to fail step after specific time
  #       timeout-minutes: 5
  #       env:
  #        SONAR_TOKEN: ${{ secrets.SONAR_SHAREDSVC_TOKEN }}

  Appium-IOS:
    runs-on: macos-latest
    #needs:
      #- Initial-check
    #env:
      #DEVICE_ID: 'FC41B203-8F38-458B-9F64-23ADB1A969B4'
      #DEVICE_ID: '424812ED-A78C-47F5-88A3-AD5901E2453F'
    steps:
      - name: Checkout 
        uses: actions/checkout@v2

      # - name: Obtain device id
      #   run: 
      - name: Tests
        run: echo "${{ env.DEVICE_ID }}"

      - name: Install appium globally
        run: yarn global add appium

      - name: Start webdriver agent
        run: |
          cd ~/.config/yarn/global/node_modules/appium-webdriveragent/
          DEVICE_ID=$(echo `xcrun simctl list | grep -v "unavailable, runtime profile not found" | grep "iPhone 11 (" | grep -v "CoreSimulator" | awk '{print $3}' |  tr -d '()'`)
          xcodebuild -project WebDriverAgent.xcodeproj -scheme WebDriverAgentRunner -destination "id=$DEVICE_ID" test &

      - name: Install node modules
        run: yarn install

      # Setup appium  
      - name: Run appium-doctor        
        run: npm run appium-doctor --ios
      - name: Run appium in the background        
        run: npm run appium &
      - name: Check appium server status        
        run: curl http://localhost:4723/wd/hub/status

      - name: Install Pod dependencies
        run: pod install
        working-directory: ios

      - name: Build IOS - architecture, sdk
        run: xcodebuild -arch x86_64 -workspace ios/ReactNativeSemaphoreNew.xcworkspace -scheme ReactNativeSemaphoreNew clean archive -sdk iphonesimulator15.0 -configuration release -UseModernBuildSystem=NO -archivePath $PWD/ReactNativeSemaphoreNew.xcarchive CODE_SIGNING_ALLOWED=NO

      # - name: Wait for webdriver to be ready
      #   run: sleep 1000

      - name: Setup upterm session
        uses: lhotari/action-upterm@v1 

      # - name: Run iOS Appium tests
      #   run: npm run mocha appium/ios
        
  # Appium-Android:
  #   runs-on: macos-latest
  #   needs:
  #     - Initial-check
  #   env:
  #     ANDROID_SDK_ROOT: '/Users/runner/Library/Android/sdk'
  #     ANDROID_HOME: '/Users/runner/Library/Android/sdk'
  #   steps:
  #     - name: Checkout 
  #       uses: actions/checkout@v2

  #     - name: Set up JDK 8
  #       uses: actions/setup-java@v1
  #       with:
  #         java-version: '8'

  #     - name: Install node modules
  #       run: yarn install && yarn add webdriverio --dev

  #     - name: Install Appium Globally
  #       run: yarn global add appium

  #     ## Setup appium  
  #     - name: Run appium-doctor        
  #       run: npm run appium-doctor --android
  #     - name: Run appium in the background        
  #       run: npm run appium &
  #     - name: Check appium server status        
  #       run: curl http://localhost:4723/wd/hub/status

  #     - name: Create build properties file
  #       run: |
  #         echo -e "password=${{ secrets.KEYSTORE_PASSWORD }}\nversion=${{ needs.Version.outputs.VERSION }}" > android/build.properties
  #         echo ${{ secrets.KEYSTORE }} | base64 -d > android/app/liatrio.keystore
  #     ## Android sdk
  #     - name: Setup android SDK
  #       uses: android-actions/setup-android@v2
  #     - name: Platform tools installation
  #       run: sdkmanager "platform-tools" "platforms;android-27"

  #     ## Android emulator creation
  #     - name: Install SDK
  #       run: sdkmanager --install "system-images;android-27;google_apis;x86"
  #     - name: Create AVD
  #       run: echo "no" | avdmanager create avd -n sdk_gphone_x86 -k "system-images;android-27;google_apis;x86"

  #     - name: Create apk file
  #       run: cd android && ./gradlew assembleRelease --no-daemon

  #     ## Android abd server
  #     - name: Start adb server
  #       run: sudo adb start-server &

  #     ## Setup android emulator
  #     - name: Run emulator
  #       run: cd /Users/runner/Library/Android/sdk/emulator && ./emulator -avd sdk_gphone_x86 -no-audio -no-window -gpu swiftshader_indirect &
  #     - name: Wait for device to be operational
  #       run: adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done; input keyevent 82'

  #     - name: Run appium integration Tests
  #       run: npm run mocha appium/android

  Build-ios:
    runs-on: macos-latest
    needs:
      - Appium-IOS

    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout 
        uses: actions/checkout@v2

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: "cpp"

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '14'
          cache: yarn
      - name: Install Node Modules
        run: yarn install
      - name: Install Cocoapods
        run: gem install cocoapods
      - name: Install Pod dependencies
        run: pod install
        working-directory: ios
      - name: Build IOS
        run: xcodebuild -workspace ios/ReactNativeSemaphoreNew.xcworkspace -scheme ReactNativeSemaphoreNew clean archive -sdk iphoneos -configuration release -UseModernBuildSystem=NO -archivePath $PWD/ReactNativeSemaphoreNew CODE_SIGNING_ALLOWED=NO
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1      
      
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: 'ios-artifact'
          path: 'ReactNativeSemaphoreNew.xcarchive/Products/Applications/ReactNativeSemaphoreNew.app'

  # Build-android:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - Appium-Android

  #   permissions:
  #     actions: read
  #     contents: read
  #     security-events: write

  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       language: [ 'java', 'javascript' ]

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Initialize CodeQL
  #       uses: github/codeql-action/init@v1
  #       with:
  #         languages: ${{ matrix.language }}

  #     - name: Setup Node
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: '14'
  #         cache: yarn
  #     - name: Install node modules
  #       run: yarn install   
  #     - name: Build Properties Setup
  #       run: |
  #         echo ${{ secrets.KEYSTORE }} | base64 -d > android/app/liatrio.keystore
  #         echo -e "password=${{ secrets.KEYSTORE_PASSWORD }}\nversion=${{ needs.Version.outputs.VERSION }}" > android/build.properties       
  #     - name: Build Android App Release Bundle
  #       run: cd android && ./gradlew bundleRelease --no-daemon

  #     - name: Perform CodeQL Analysis
  #       uses: github/codeql-action/analyze@v1

  #     - name: Upload release artifacts
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: 'android-artifact'
  #         path: '/home/runner/work/mobile-pipeline-poc/mobile-pipeline-poc/android/app/build/outputs/bundle/release/app-release.aab'

  # create-release-and-publish-ios-android-binaries: 
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main'
  #   needs:
  #     - Version 
  #     - Build-ios
  #     - Build-android
  #     - Appium-IOS
  #     - Appium-Android
  #   steps:
  #     - name: Checkout 
  #       uses: actions/checkout@v2
  #     - name: Create release
  #       uses: liatrio/github-actions/github-create-release@master
  #       with:
  #         owner: 'liatrio'
  #         repo: 'mobile-pipeline-poc'
  #         tag_name: 'v${{ needs.Version.outputs.VERSION }}'
  #         token_name: 'token'
  #         name: 'Release: ${{ needs.Version.outputs.VERSION }}'
  #         pat: ${{ secrets.GITHUB_TOKEN }}  
  #     - name: Download IOS/Android artifact
  #       uses: actions/download-artifact@v2
  #       with: 
  #         path: /home/runner/work/mobile-pipeline-poc/mobile-pipeline-poc
  #     - name: Deploy android binary to release assets
  #       uses: liatrio/github-actions/github-upload-asset@master
  #       with: 
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         FILE: android-artifact/app-release.aab
  #         REPO: ${{ env.REPO }} 
  #     - name: Deploy IOS binary to release assets
  #       uses: liatrio/github-actions/github-upload-asset@master
  #       with: 
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         FILE: ios-artifact/ReactNativeSemaphoreNew
  #         REPO: ${{ env.REPO }}
  #     - name: Fastlane
  #       run: |
  #         echo ${{ secrets.GOOGLE_API_KEY }} | base64 -d > fastlane/google_api_key.json
  #         fastlane android release aab_path:android-artifact/app-release.aab
